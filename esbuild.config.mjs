import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import sveltePlugin from "esbuild-svelte";
import sveltePreprocess from "svelte-preprocess";
import fs from "fs";
import path from "path";

const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const footer = `
module.exports = GraphicOrganizerPlugin;
`;

const prod = (process.argv[2] === 'production');

// Function to copy plugin files to dist directory
function copyPluginFiles() {
	// Create dist directory if it doesn't exist
	if (!fs.existsSync('dist')) {
		fs.mkdirSync('dist');
	}
	
	// Copy manifest.json
	if (fs.existsSync('manifest.json')) {
		fs.copyFileSync('manifest.json', 'dist/manifest.json');
		console.log('âœ“ Copied manifest.json to dist/');
	}
	
	// Copy styles.css
	if (fs.existsSync('styles.css')) {
		fs.copyFileSync('styles.css', 'dist/styles.css');
		console.log('âœ“ Copied styles.css to dist/');
	}
	
	console.log('ðŸ“¦ Plugin files ready in dist/ directory');
}

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	footer: {
		js: footer,
	},
	entryPoints: ['main.ts'],
	bundle: true,
	external: [
		'obsidian',
		'electron',
		'canvas',
		'@codemirror/autocomplete',
		'@codemirror/collab',
		'@codemirror/commands',
		'@codemirror/language',
		'@codemirror/lint',
		'@codemirror/search',
		'@codemirror/state',
		'@codemirror/view',
		'@lezer/common',
		'@lezer/highlight',
		'@lezer/lr',
		...builtins],
	format: 'cjs',
	platform: 'browser',
	target: 'es2018',
	logLevel: "info",
	sourcemap: prod ? false : 'inline',
	treeShaking: true,
	outfile: 'dist/main.js',
	plugins: [
		sveltePlugin({
			preprocess: sveltePreprocess(),
			compilerOptions: { css: 'injected' }
		})
	],
});

if (prod) {
	await context.rebuild();
	copyPluginFiles();
	process.exit(0);
} else {
	// For development, copy files initially and on rebuilds
	copyPluginFiles();
	
	// Override the rebuild to include file copying
	const originalRebuild = context.rebuild;
	context.rebuild = async (...args) => {
		const result = await originalRebuild.apply(context, args);
		copyPluginFiles();
		return result;
	};
	
	await context.watch();
}
